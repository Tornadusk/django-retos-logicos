# Retos L√≥gico Matem√°ticos

Sistema web para resolver retos l√≥gicos y matem√°ticos con sistema de puntuaci√≥n y ranking.

## Caracter√≠sticas

- **Sistema de Retos**: Publicaci√≥n y gesti√≥n de acertijos y problemas l√≥gicos
- **Clasificaci√≥n por Dificultad**: 4 niveles (F√°cil, Medio, Dif√≠cil, Experto)
- **Sistema de Puntuaci√≥n**: Puntos basados en dificultad y tiempo de respuesta
- **Ranking de Usuarios**: Clasificaci√≥n competitiva entre usuarios
- **Dashboard Personal**: Estad√≠sticas y progreso individual
- **Admin Panel**: Gesti√≥n completa de retos y usuarios

## Estructura del Proyecto

```
RetosL√≥gicoMatem√°ticos/
‚îú‚îÄ‚îÄ retos/           # App principal - vistas de home, dashboard, lista de retos
‚îú‚îÄ‚îÄ juego/           # L√≥gica de puntuaci√≥n, intentos y ranking
‚îú‚îÄ‚îÄ cuentas/         # Login/registro y perfil de usuario
‚îú‚îÄ‚îÄ proyect/         # Configuraci√≥n del proyecto Django
‚îî‚îÄ‚îÄ fixtures/        # Datos de ejemplo
```

## Instalaci√≥n

1. **Clonar el repositorio**
   ```bash
   git clone <url-del-repositorio>
   cd RetosL√≥gicoMatem√°ticos
   ```

2. **Crear entorno virtual**
   ```bash
   python -m venv venv
   venv\Scripts\activate  # Windows
   # source venv/bin/activate  # Linux/Mac
   ```

3. **Instalar dependencias**
   ```bash
   pip install -r requirements.txt
   ```

4. **Configurar base de datos**
   ```bash
   python manage.py makemigrations
   python manage.py migrate
   ```

5. **Crear superusuario**
   ```bash
   python manage.py createsuperuser
   ```

6. **Cargar datos de ejemplo (opcional)**
   ```bash
   python manage.py loaddata fixtures/datos_ejemplo.json
   ```
   
   **Nota**: Los datos de ejemplo incluyen:
   - 6 categor√≠as de retos (L√≥gica, Matem√°ticas, Secuencias, etc.)
   - 12 retos con diferentes dificultades
   - 3 configuraciones de ordenamiento
   - Datos para probar todas las funcionalidades

7. **Ejecutar servidor**
   ```bash
   python manage.py runserver
   ```

## Uso

### Para Usuarios:
1. **Acceder al sitio**: http://127.0.0.1:8000/
2. **Registrar usuario** y comenzar a resolver retos
3. **Usar filtros** en la lista de retos para encontrar retos espec√≠ficos
4. **Cambiar ordenamiento** usando el selector "Ordenar por"
5. **Ver estad√≠sticas** en el dashboard personal

### Para Administradores:
1. **Admin panel**: http://127.0.0.1:8000/admin/
2. **Gestionar retos** desde el panel de administraci√≥n
3. **Configurar ordenamiento** global en "Configuraciones de Ordenamiento"
4. **Establecer prioridades** individuales en cada reto
5. **Ver estad√≠sticas** del sistema en "Ver Estad√≠sticas"
6. **Generar reportes** en "Ver Reportes"

### Configuraci√≥n del Sistema de Ordenamiento:

#### Como Admin:
1. **Ir a**: Admin ‚Üí Configuraciones de Ordenamiento
2. **Crear/Editar** configuraci√≥n activa
3. **Elegir orden por defecto**: fecha, dificultad, puntos, prioridad, popularidad, aleatorio
4. **Configurar paginaci√≥n**: n√∫mero de retos por p√°gina
5. **Activar configuraci√≥n**: solo una puede estar activa

#### Configurar retos individuales:
1. **Ir a**: Admin ‚Üí Retos
2. **Editar reto** espec√≠fico
3. **Establecer prioridad**: n√∫mero mayor = m√°s arriba
4. **Marcar aleatorio**: para mostrar en orden aleatorio
5. **Guardar cambios**

#### Como Usuario:
1. **Ir a**: Lista de Retos
2. **Usar filtros**: dificultad, categor√≠a, b√∫squeda
3. **Cambiar ordenamiento**: selector "Ordenar por"
4. **Ver indicadores**: badges de prioridad y aleatorio

## Modelo de Datos

### Entidades Principales:
- **Usuario**: Perfil extendido con puntuaci√≥n y estad√≠sticas
- **Reto**: Acertijos con dificultad, categor√≠a y puntos
- **Intento**: Respuestas de usuarios con puntuaci√≥n
- **Ranking**: Clasificaci√≥n de usuarios por puntuaci√≥n
- **Categor√≠a**: Clasificaci√≥n de retos por tipo
- **ConfiguracionOrdenamiento**: Control del orden de visualizaci√≥n

### Relaciones:
- Usuario 1:N Intento
- Reto 1:N Intento
- Categor√≠a 1:N Reto
- Usuario 1:1 PerfilUsuario

## Sistema de Ordenamiento

### Caracter√≠sticas:
- **Ordenamiento configurable**: El admin puede elegir c√≥mo se muestran los retos
- **Prioridad individual**: Cada reto puede tener una prioridad espec√≠fica
- **Modo aleatorio**: Retos que se muestran en orden aleatorio
- **Filtros de usuario**: Los usuarios pueden cambiar el ordenamiento

### Opciones de ordenamiento:
- **Por fecha**: M√°s recientes primero
- **Por dificultad**: F√°cil ‚Üí Medio ‚Üí Dif√≠cil ‚Üí Experto
- **Por puntos**: M√°s puntos primero
- **Por prioridad**: Seg√∫n configuraci√≥n del admin
- **Por popularidad**: M√°s intentos primero
- **Aleatorio**: Orden completamente aleatorio

## Fixtures (Datos de Ejemplo)

### ¬øQu√© son las fixtures?
Las fixtures son archivos que contienen datos de ejemplo para poblar la base de datos. Son √∫tiles para:
- Probar el sistema sin crear datos manualmente
- Configurar el sistema con informaci√≥n b√°sica
- Tener datos consistentes entre desarrolladores

### Comandos para fixtures:

#### Cargar datos de ejemplo:
```bash
python manage.py loaddata fixtures/datos_ejemplo.json
```

#### Crear nuevas fixtures:
```bash
python manage.py dumpdata retos > fixtures/retos_completos.json
python manage.py dumpdata juego > fixtures/juego_completo.json
python manage.py dumpdata cuentas > fixtures/cuentas_completo.json
```

#### Limpiar y recargar datos:
```bash
python manage.py flush
python manage.py loaddata fixtures/datos_ejemplo.json
```

#### Exportar datos espec√≠ficos:
```bash
python manage.py dumpdata retos.reto --indent 2 > fixtures/retos_exportados.json
python manage.py dumpdata retos.categoria --indent 2 > fixtures/categorias_exportadas.json
```

### Contenido de datos_ejemplo.json:
- **6 categor√≠as**: L√≥gica B√°sica, Matem√°ticas, Secuencias, Geometr√≠a, Problemas de Palabras, Optimizaci√≥n
- **12 retos**: Con diferentes dificultades y configuraciones de ordenamiento
- **3 configuraciones**: De ordenamiento (Principal, Aleatorio, Por Dificultad)
- **Datos de prueba**: Para probar todas las funcionalidades del sistema

## Archivos Est√°ticos

### Estructura de archivos est√°ticos:
```
retos/static/retos/
‚îú‚îÄ‚îÄ css/
‚îÇ   ‚îú‚îÄ‚îÄ retos.css          # Estilos generales de la app retos
‚îÇ   ‚îî‚îÄ‚îÄ dificultad.css     # Colores espec√≠ficos para badges de dificultad
‚îî‚îÄ‚îÄ js/
    ‚îî‚îÄ‚îÄ lista_retos.js     # Filtros autom√°ticos y funcionalidad JavaScript

juego/static/juego/
‚îî‚îÄ‚îÄ css/
    ‚îî‚îÄ‚îÄ juego.css          # Estilos para la app juego

cuentas/static/cuentas/
‚îî‚îÄ‚îÄ css/
    ‚îî‚îÄ‚îÄ cuentas.css        # Estilos para la app cuentas
```

### Caracter√≠sticas de los archivos est√°ticos:
- **CSS modular**: Cada app tiene sus propios estilos
- **JavaScript organizado**: L√≥gica separada en archivos espec√≠ficos
- **Colores consistentes**: Sistema de colores unificado para dificultades
- **Responsive**: Dise√±o adaptable a diferentes tama√±os de pantalla

## Tecnolog√≠as

- **Backend**: Django 5.2.6
- **Frontend**: Bootstrap 5, Font Awesome
- **Base de datos**: SQLite (desarrollo)
- **Python**: 3.8+
- **JavaScript**: Filtros autom√°ticos y interactividad
- **CSS**: Estilos personalizados para badges y dificultades

## Interfaz de Usuario

### Caracter√≠sticas Visuales:
- **Badges de Categor√≠a**: Colores distintivos para cada tipo de reto
- **Badges de Dificultad**: 
  - üü¢ **F√°cil**: Verde (#28a745)
  - üü° **Medio**: Amarillo (#ffc107) 
  - üü† **Dif√≠cil**: Naranja (#fd7e14)
  - üî¥ **Experto**: Rojo (#dc3545)
- **Badges de Puntos**: Azul con icono de estrella
- **Indicadores Especiales**: 
  - ‚≠ê **Prioridad**: Badge amarillo para retos prioritarios
  - üîÄ **Aleatorio**: Badge verde para retos aleatorios

### Filtros Autom√°ticos:
- **Sin botones**: Los filtros se aplican autom√°ticamente
- **B√∫squeda inteligente**: Filtra 1 segundo despu√©s de escribir
- **Indicadores visuales**: Muestra qu√© filtros est√°n activos
- **Limpieza f√°cil**: Bot√≥n para resetear todos los filtros

## Funcionalidades

### Para Usuarios:
- Registro e inicio de sesi√≥n
- Dashboard personal con estad√≠sticas
- Lista de retos con filtros autom√°ticos
- Sistema de puntuaci√≥n
- Ranking global
- **Filtros autom√°ticos**: Los filtros se aplican autom√°ticamente al cambiar valores
- **Badges visuales**: Categor√≠a, dificultad y puntos claramente identificados
- **Colores por dificultad**: Verde (F√°cil), Amarillo (Medio), Naranja (Dif√≠cil), Rojo (Experto)

### Para Administradores:
- Gesti√≥n completa de retos
- Administraci√≥n de usuarios
- Estad√≠sticas del sistema
- Panel de control Django

## Estructura de Apps

### retos/
- `home()`: P√°gina principal
- `dashboard()`: Panel del usuario
- `ListaRetosView`: Lista con filtros
- `DetalleRetoView`: Vista detallada del reto
- `intentar_reto()`: Procesar respuestas

### juego/
- `RankingView`: Clasificaci√≥n de usuarios
- `mis_estadisticas()`: Estad√≠sticas personales
- `progreso_global()`: Estad√≠sticas generales

### cuentas/
- `registro()`: Registro de usuarios
- `perfil()`: Gesti√≥n de perfil
- `cambiar_password()`: Cambio de contrase√±a

## Comandos √ötiles

### Desarrollo:
```bash
# Crear migraciones
python manage.py makemigrations

# Aplicar migraciones
python manage.py migrate

# Crear superusuario
python manage.py createsuperuser

# Ejecutar servidor
python manage.py runserver

# Limpiar base de datos
python manage.py flush
```

### Fixtures:
```bash
# Cargar datos de ejemplo
python manage.py loaddata fixtures/datos_ejemplo.json

# Exportar datos actuales
python manage.py dumpdata --indent 2 > fixtures/backup_completo.json

# Exportar solo retos
python manage.py dumpdata retos --indent 2 > fixtures/retos_backup.json

# Exportar solo usuarios
python manage.py dumpdata auth.User --indent 2 > fixtures/usuarios_backup.json
```

### Troubleshooting:
```bash
# Si hay errores de migraci√≥n
python manage.py migrate --fake-initial

# Si hay problemas con fixtures
python manage.py flush
python manage.py loaddata fixtures/datos_ejemplo.json

# Verificar estado de la base de datos
python manage.py showmigrations

# Resetear base de datos completamente
rm db.sqlite3
python manage.py migrate
python manage.py loaddata fixtures/datos_ejemplo.json
```

## Mejoras Implementadas

### Sistema de Ordenamiento:
- ‚úÖ **Configuraci√≥n global**: Admin puede elegir orden por defecto
- ‚úÖ **Prioridad individual**: Cada reto puede tener prioridad espec√≠fica
- ‚úÖ **Modo aleatorio**: Retos que se muestran aleatoriamente
- ‚úÖ **Filtros autom√°ticos**: Sin necesidad de presionar botones

### Interfaz Visual:
- ‚úÖ **Badges de dificultad**: Colores espec√≠ficos por nivel
- ‚úÖ **Iconos descriptivos**: Se√±ales, estrellas, aleatorio
- ‚úÖ **Espaciado mejorado**: Mejor organizaci√≥n visual
- ‚úÖ **Indicadores activos**: Muestra filtros aplicados

### Archivos Est√°ticos:
- ‚úÖ **JavaScript modular**: `lista_retos.js` para filtros
- ‚úÖ **CSS espec√≠fico**: `dificultad.css` para colores
- ‚úÖ **Organizaci√≥n**: Cada app con sus archivos est√°ticos
- ‚úÖ **Mantenibilidad**: C√≥digo separado y organizado

## Contribuir

1. Fork el proyecto
2. Crear rama para feature (`git checkout -b feature/nueva-funcionalidad`)
3. Commit cambios (`git commit -am 'Agregar nueva funcionalidad'`)
4. Push a la rama (`git push origin feature/nueva-funcionalidad`)
5. Crear Pull Request

## Licencia

Este proyecto est√° bajo la Licencia MIT.
